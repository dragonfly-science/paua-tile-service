import {
  LRUCache_default,
  fromKey,
  getKey
} from "./chunk-P75IRDMT.js";

// node_modules/ol/TileCache.js
var __extends = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var TileCache = function(_super) {
  __extends(TileCache2, _super);
  function TileCache2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  TileCache2.prototype.expireCache = function(usedTiles) {
    while (this.canExpireCache()) {
      var tile = this.peekLast();
      if (tile.getKey() in usedTiles) {
        break;
      } else {
        this.pop().release();
      }
    }
  };
  TileCache2.prototype.pruneExceptNewestZ = function() {
    if (this.getCount() === 0) {
      return;
    }
    var key = this.peekFirstKey();
    var tileCoord = fromKey(key);
    var z = tileCoord[0];
    this.forEach(function(tile) {
      if (tile.tileCoord[0] !== z) {
        this.remove(getKey(tile.tileCoord));
        tile.release();
      }
    }.bind(this));
  };
  return TileCache2;
}(LRUCache_default);
var TileCache_default = TileCache;

// node_modules/ol/tilegrid/common.js
var DEFAULT_MAX_ZOOM = 42;
var DEFAULT_TILE_SIZE = 256;

export {
  DEFAULT_MAX_ZOOM,
  DEFAULT_TILE_SIZE,
  TileCache_default
};
//# sourceMappingURL=chunk-ZPLQMVAX.js.map
